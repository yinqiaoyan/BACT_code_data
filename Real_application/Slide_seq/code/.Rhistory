coord = coord[, -1]
colnames(coord) = c("coord_x", "coord_y")
### Randomly select 8000 cells for downstream analysis
set.seed(15)
ids_subset = sample(1:nrow(coord), 8000, replace = F)
coord_subset = coord[ids_subset, ]
data_subset = geneData_raw_noName[, ids_subset]
## Preprocess the raw data
# 1. For BACT
# Use R function DataPreprocess in the package BACT
# norm.type="logNorm"
sce <- SingleCellExperiment(assays=list(counts=data_subset),
colData = coord_subset)
sce = DataPreprocess(sce, n.PCs=50, norm.type="logNorm",
select.hvg=TRUE, n.HVGs = 5000)
## Get the processed data after conducting PCA
gene_data_pc = t(reducedDim(sce, "PCA"))
## Save preprocessed data
coord = coord_subset
save(coord, gene_data_pc, file = "../input_data/coord_and_pc.RData")
# 2. For competing methods
# Take log-normalization, and select 5000 HVGs
sce <- SingleCellExperiment(assays=list(counts=data_subset),
colData = coord_subset)
sce <- logNormCounts(sce)
dec <- modelGeneVar(sce, assay.type="logcounts")
top <- getTopHVGs(dec, n=5000)
rowData(sce)[["is.HVG"]] <- (rownames(sce) %in% top)
lognorm_data_hvg = sce@assays@data@listData[["logcounts"]]
lognorm_data_hvg = lognorm_data_hvg[rowData(sce)[["is.HVG"]], ]
write.csv(lognorm_data_hvg, file = "../input_data/processed_gene_data_5000HVGs.csv", row.names = F)
AA1 = read.csv("../input_data/gene_raw_counts.csv")
AA2 = read.csv("/Users/yyq/Documents/MyDocument/project/image (Bioinformatics)/code/校服务器共享集群/sc_resol_st/Puck_180430_1/run-code/raw_counts_subset.csv")
sum(AA1 != AA2)
AA1 = read.csv("../input_data/processed_gene_data_5000HVGs.csv")
AA2 = read.csv("/Users/yyq/Documents/MyDocument/project/image (Bioinformatics)/code/校服务器共享集群/sc_resol_st/Puck_180430_1/run-code/lognormalized_gene_data_SampleSpots8k_HVG5k.csv")
sum(AA1 != AA2)
library(BACT)
## Set the working directory to the source file location
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)
print(getwd())
## Read data
load("../input_data/coord_and_pc.RData")
## Run BACT
# Total execution time is about 30 minutes
# on a MacBook Pro with Intel Core i5 CPU at 2GHz and 16GB of RAM.
# res_list = BACT(gene_data_pc = gene_data_pc, coord = coord, platform = "sc",
#                 num_init = 4, num_nei = 6,
#                 d1=3, R1_elem=0.5,
#                 a_eta=0, b_eta=1.5, IGkappa=2, IGtau=10, dpAlpha=1,
#                 a_beta=1, tau_beta=1, tau0=0.01, tau1=0.05, M0=50,
#                 numOfMCMC=4000, burnIn=2000,
#                 Is_beta_zero=FALSE, Is_warm_start=TRUE,
#                 Is_kmeans_use_mean_sd=TRUE,
#                 Is_print=TRUE, print_gap=500,
#                 Is_random_seed=TRUE, random_seed=9)
ress = BACT(gene_data_pc = gene_data_pc, coord = coord, platform = "sc",
num_init = 4, num_nei = 6,
d1=3, R1_elem=0.5,
a_eta=0, b_eta=1.5, IGkappa=2, IGtau=10, dpAlpha=1,
a_beta=1, tau_beta=1, tau0=0.01, tau1=0.05, M0=50,
numOfMCMC=20, burnIn=0,
Is_beta_zero=FALSE, Is_warm_start=TRUE,
Is_kmeans_use_mean_sd=TRUE,
Is_print=TRUE, print_gap=500,
Is_random_seed=TRUE, random_seed=9)
load("/Users/yyq/Documents/MyDocument/project/image (Bioinformatics)/code/校服务器共享集群/sc_resol_st/Puck_180430_1/slideseq_res/slideseq S3 Ex3-2-2 Seed9 Num6 simple.RData")
aa1 = res_list$pottsBeta_mcmc[1:20]
aa2 = ress$pottsBeta_mcmc
sum(aa1 != aa2)
aa1
# res_list = BACT(gene_data_pc = gene_data_pc, coord = coord, platform = "sc",
#                 num_init = 4, num_nei = 6,
#                 d1=3, R1_elem=0.5,
#                 a_eta=0, b_eta=1.5, IGkappa=2, IGtau=10, dpAlpha=1,
#                 a_beta=1, tau_beta=1, tau0=0.01, tau1=0.05, M0=50,
#                 numOfMCMC=4000, burnIn=2000,
#                 Is_beta_zero=FALSE, Is_warm_start=TRUE,
#                 Is_kmeans_use_mean_sd=TRUE,
#                 Is_print=TRUE, print_gap=500,
#                 Is_random_seed=TRUE, random_seed=9)
ress = BACT(gene_data_pc = gene_data_pc, coord = coord, platform = "sc",
num_init = 4, num_nei = 6,
d1=3, R1_elem=0.5,
a_eta=0, b_eta=1.5, IGkappa=2, IGtau=10, dpAlpha=1,
a_beta=1, tau_beta=1, tau0=0.01, tau1=0.05, M0=50,
numOfMCMC=50, burnIn=0,
Is_beta_zero=FALSE, Is_warm_start=TRUE,
Is_kmeans_use_mean_sd=TRUE,
Is_print=TRUE, print_gap=500,
Is_random_seed=TRUE, random_seed=9)
aa1 = res_list$pottsBeta_mcmc[1:50]
aa2 = ress$pottsBeta_mcmc
sum(aa1 != aa2)
getmode <- function(v) {
uniqv <- unique(v)
res <- uniqv[which.max(tabulate(match(v, uniqv)))]
return(res)
}
x_int = 4001:8000
tmpc = apply(res_list$clIds_mcmc[x_int,], 2, getmode)
clIds_mode = tmpc
save_res = data.frame(coord_x = coord[, 1], coord_y = coord[, 2], labels = clIds_mode)
write.csv(x = save_res, file = "../result_data/slide_result_BACT.csv")
library(SingleCellExperiment)
library(scran)  # R==4.1.3
# Bioconductor version 3.14 (BiocManager 1.30.16), R 4.1.3
# remotes::install_version("matrixStats", version="1.1.0")
library(scater)
library(BiocSingular)
library(BACT)
## Set the working directory to the source file location
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)
print(getwd())
## Read raw data
coord = read.csv("../input_data/BeadLocationsForR.csv")
# Dim: genes * cells =  18906 * 24847
cell_name = coord[, 1]
coord = coord[, -1]
colnames(coord) = c("coord_x", "coord_y")
### Randomly select 8000 cells for downstream analysis
set.seed(15)
ids_subset = sample(1:nrow(coord), 8000, replace = F)
coord_subset = coord[ids_subset, ]
data_subset = geneData_raw_noName[, ids_subset]
## Save subset of raw data
write.csv(coord_subset, file = "../input_data/coordinates.csv", row.names = F)
library(ggplot2)
## Set the working directory to the source file location
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)
print(getwd())
coord = read.csv("../input_data/coordinates.csv")
plot_color=c("#78A6DE", "#ffb610", "#ff6466", "#6b1499", "#7b92ce",
"#d2d1d0", "#138320", "#3185eb", "#9d766e", "#b2c7e5",
"#a8dc93", "#f29d99", "#FFE0C1", "#EFCDF7")
##############################################################
#####                     (1) BACT                       #####
##############################################################
## Result of BACT
tmpres = read.csv("../result_data/slideseq_result_BACT.csv")
tmpc = tmpres$labels
ppdata = data.frame(x = coord[, 1], y = coord[, 2], c = tmpc)
pp = ggplot(data = ppdata, aes(x=x, y=y)) +
geom_point(aes(color=factor(c)), size = 2.2) +
theme(panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.text = element_text(size = 35),
legend.title = element_blank(),
legend.key.size = unit(2, 'cm')) +
scale_color_manual(values=plot_color,
labels = paste0("C", 1:14)) +
guides(color = guide_legend(override.aes = list(size = 12), ncol = 2))
# pp
ggsave("../figures/slideseq_bact.png", pp, width = 18, height = 10, dpi = 100)
##############################################################
#####                    (2) SpaGCN                      #####
##############################################################
# Result of SpaGCN
tmpres = read.csv("../result_data/slideseq_result_SpaGCN.csv")
tmpc = tmpres$pred
## Swap label numbers only for better visualization
tmpc2 = tmpc
tmpc_vec = sort(unique(tmpc))
tmpc2_vec = c(1,3,2,4)
for (ii in 1:length(unique(tmpc))) {
tmpc2[tmpc == tmpc_vec[ii]] = tmpc2_vec[[ii]]
}
tmpc = tmpc2
ppdata = data.frame(x = coord[, 1], y = coord[, 2], c = tmpc)
pp = ggplot(data = ppdata, aes(x=x, y=y)) +
geom_point(aes(color=factor(c)), size = 2.2) +
theme(panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.text = element_text(size = 35),
legend.title = element_blank(),
legend.key.size = unit(2, 'cm')) +
scale_color_manual(values=plot_color) +
guides(color = guide_legend(override.aes = list(size = 12)))
ggsave("../figures/slideseq_spagcn.png", pp, width = 16.5, height = 10, dpi = 100)
##############################################################
#####                    (3) STAGATE                     #####
##############################################################
# Result of STAGATE
tmpres = read.csv("../result_data/slideseq_result_STAGATE.csv")
tmpc = tmpres$mclust
## Swap label numbers only for better visualization
tmpc2 = tmpc
tmpc_vec = sort(unique(tmpc))
tmpc2_vec = c(1,2,4,3)
for (ii in 1:length(unique(tmpc))) {
tmpc2[tmpc == tmpc_vec[ii]] = tmpc2_vec[[ii]]
}
tmpc = tmpc2
ppdata = data.frame(x = coord[, 1], y = coord[, 2], c = tmpc)
pp = ggplot(data = ppdata, aes(x=x, y=y)) +
geom_point(aes(color=factor(c)), size = 2.2) +
theme(panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.text = element_text(size = 35),
legend.title = element_blank(),
legend.key.size = unit(2, 'cm')) +
scale_color_manual(values=plot_color) +
guides(color = guide_legend(override.aes = list(size = 12)))
ggsave("../figures/slideseq_stagate.png", pp, width = 16.5, height = 10, dpi = 100)
##############################################################
#####                    (4) BANKSY                      #####
##############################################################
# Result of STAGATE
tmpres = read.csv("../result_data/slideseq_result_BANKSY.csv")
tmpc = tmpres$mclust
## Swap label numbers only for better visualization
tmpc2 = tmpc
tmpc_vec = sort(unique(tmpc))
tmpc2_vec = c(3,1,2,4)
for (ii in 1:length(unique(tmpc))) {
tmpc2[tmpc == tmpc_vec[ii]] = tmpc2_vec[[ii]]
}
tmpc = tmpc2
ppdata = data.frame(x = coord[, 1], y = coord[, 2], c = tmpc)
pp = ggplot(data = ppdata, aes(x=x, y=y)) +
geom_point(aes(color=factor(c)), size = 2.2) +
theme(panel.background = element_blank(),
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.text = element_text(size = 35),
legend.title = element_blank(),
legend.key.size = unit(2, 'cm')) +
scale_color_manual(values=plot_color) +
guides(color = guide_legend(override.aes = list(size = 12)))
ggsave("../figures/slideseq_banksy.png", pp, width = 16.5, height = 10, dpi = 100)
### edgeR DE analysis ###
library(edgeR)
## Set the working directory to the source file location
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)
print(getwd())
packageVersion("edgeR")
tmpres = read.csv("../result_data/slideseq_result_BACT.csv")
View(tmpres)
clIds_res = tmpres$labels
group <- rep("control", 8000)
group[clIds_res == 4] = "treat"
### --- data preprocessing --- ###
# Build DGEList object
dgelist <- DGEList(counts = data_subset, group = group)
### edgeR DE analysis ###
library(edgeR)
## Set the working directory to the source file location
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)
print(getwd())
## Read data
data_subset = read.csv("../input_data/gene_raw_counts.csv")
tmpres = read.csv("../result_data/slideseq_result_BACT.csv")
clIds_res = tmpres$labels
group <- rep("control", 8000)
group[clIds_res == 4] = "treat"
### --- data preprocessing --- ###
# Build DGEList object
dgelist <- DGEList(counts = data_subset, group = group)
# dim: 18906 * 8000
dim(dgelist)
# Approach to filter low count data, such as CPM normalization (recommended)
keep <- rowSums(cpm(dgelist) > 1 ) >= 2
dgelist <- dgelist[keep, , keep.lib.sizes = FALSE]
# dim: 13960 * 8000
# Standardization, for example, TMM standardization
dgelist_norm <- calcNormFactors(dgelist, method = 'TMM')
# dim: 13960 * 8000
### --- DE gene analysis --- ###
# Construct the experimental design matrix based on the grouping information.
# Notice that the control group comes before the treatment group in the grouping information.
design <- model.matrix(~group)
# Estimate the dispersion of gene expression values
dge <- estimateDisp(dgelist_norm, design, robust = TRUE)
# Model fitting:
# negative binomial generalized log-linear model
fit <- glmFit(dge, design, robust = TRUE)
lrt <- topTags(glmLRT(fit), n = nrow(dgelist$counts))
### --- select DE genes --- ###
#读取上述输出的差异倍数计算结果
# gene_diff <- read.delim('/Users/yyq/Documents/MyDocument/project/image (Bioinformatics)/code/校服务器共享集群/sc_resol_st/Puck_180430_1/run-code/control_treat.glmLRT.txt', row.names = 1, sep = '\t', check.names = FALSE)
gene_diff <- lrt$table
# Sort the table by FDR value in ascending order.
# If the FDR value is the same, continue to sort by log2FC in descending order.
gene_diff <- gene_diff[order(gene_diff$FDR, gene_diff$logFC, decreasing = c(FALSE, TRUE)), ]
# log2FC≥1 & FDR<0.01 mark "up", denote the up-regulated genes
# log2FC≤-1 & FDR<0.01 mark "down", denote the down-regulated genes
# else mark "none", denote the non-DE genes
gene_diff[which(gene_diff$logFC >= 1 & gene_diff$FDR < 0.01),'sig'] <- 'up'
gene_diff[which(gene_diff$logFC <= -1 & gene_diff$FDR < 0.01),'sig'] <- 'down'
gene_diff[which(abs(gene_diff$logFC) <= 1 | gene_diff$FDR >= 0.01),'sig'] <- 'none'
# Output the table of DE genes
gene_diff_select <- subset(gene_diff, sig %in% c('up', 'down'))
gene_diff[which(gene_diff$FDR < 0.01),'onlyFDR'] <- 'Sig'
gene_diff[which(gene_diff$FDR >= 0.01),'onlyFDR'] <- 'none'
gene_diff_select_FDR <- subset(gene_diff, onlyFDR %in% 'Sig')
View(gene_diff_select_FDR)
write.table(gene_diff_select_FDR, file = '../result_data/control_treat.glmLRT.select_FDR.txt', sep = '\t', col.names = NA, quote = FALSE)
View(gene_diff_select_FDR)
View(gene_diff)
View(data_subset)
library(SingleCellExperiment)
library(scran)  # R==4.1.3
# Bioconductor version 3.14 (BiocManager 1.30.16), R 4.1.3
# remotes::install_version("matrixStats", version="1.1.0")
library(scater)
library(BiocSingular)
library(BACT)
## Set the working directory to the source file location
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)
print(getwd())
## Read raw data
coord = read.csv("../input_data/BeadLocationsForR.csv")
geneData_raw = read.csv("../input_data/MappedDGEForR.csv")
gene_names = geneData_raw[, 1]
geneData_raw_noName = as.matrix(geneData_raw[, -1])
rownames(geneData_raw_noName) = gene_names
# Dim: genes * cells =  18906 * 24847
cell_name = coord[, 1]
coord = coord[, -1]
colnames(coord) = c("coord_x", "coord_y")
### Randomly select 8000 cells for downstream analysis
set.seed(15)
ids_subset = sample(1:nrow(coord), 8000, replace = F)
coord_subset = coord[ids_subset, ]
data_subset = geneData_raw_noName[, ids_subset]
View(data_subset)
write.csv(data_subset, file = "../input_data/gene_raw_counts_2.csv")
### edgeR DE analysis ###
library(edgeR)
## Set the working directory to the source file location
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)
print(getwd())
## Read data
data_subset = read.csv("../input_data/gene_raw_counts_2.csv")
tmpres = read.csv("../result_data/slideseq_result_BACT.csv")
clIds_res = tmpres$labels
group <- rep("control", 8000)
group[clIds_res == 4] = "treat"
View(data_subset)
cell_names = data_subset[, 1]
cell_names[1:3]
data_subset = data_subset[, -1]
rownames(data_subset) = cell_names
View(data_subset)
tmpres = read.csv("../result_data/slideseq_result_BACT.csv")
clIds_res = tmpres$labels
group <- rep("control", 8000)
group[clIds_res == 4] = "treat"
### --- data preprocessing --- ###
# Build DGEList object
dgelist <- DGEList(counts = data_subset, group = group)
# dim: 18906 * 8000
# Approach to filter low count data, such as CPM normalization (recommended)
keep <- rowSums(cpm(dgelist) > 1 ) >= 2
dgelist <- dgelist[keep, , keep.lib.sizes = FALSE]
# dim: 13960 * 8000
# Standardization, for example, TMM standardization
dgelist_norm <- calcNormFactors(dgelist, method = 'TMM')
# dim: 13960 * 8000
### --- DE gene analysis --- ###
# Construct the experimental design matrix based on the grouping information.
# Notice that the control group comes before the treatment group in the grouping information.
design <- model.matrix(~group)
# Estimate the dispersion of gene expression values
dge <- estimateDisp(dgelist_norm, design, robust = TRUE)
# Model fitting:
# negative binomial generalized log-linear model
fit <- glmFit(dge, design, robust = TRUE)
lrt <- topTags(glmLRT(fit), n = nrow(dgelist$counts))
### --- select DE genes --- ###
#读取上述输出的差异倍数计算结果
# gene_diff <- read.delim('/Users/yyq/Documents/MyDocument/project/image (Bioinformatics)/code/校服务器共享集群/sc_resol_st/Puck_180430_1/run-code/control_treat.glmLRT.txt', row.names = 1, sep = '\t', check.names = FALSE)
gene_diff <- lrt$table
# Sort the table by FDR value in ascending order.
# If the FDR value is the same, continue to sort by log2FC in descending order.
gene_diff <- gene_diff[order(gene_diff$FDR, gene_diff$logFC, decreasing = c(FALSE, TRUE)), ]
# log2FC≥1 & FDR<0.01 mark "up", denote the up-regulated genes
# log2FC≤-1 & FDR<0.01 mark "down", denote the down-regulated genes
# else mark "none", denote the non-DE genes
gene_diff[which(gene_diff$logFC >= 1 & gene_diff$FDR < 0.01),'sig'] <- 'up'
gene_diff[which(gene_diff$logFC <= -1 & gene_diff$FDR < 0.01),'sig'] <- 'down'
gene_diff[which(abs(gene_diff$logFC) <= 1 | gene_diff$FDR >= 0.01),'sig'] <- 'none'
dim(dgelist)
View(dgelist)
library(SingleCellExperiment)
library(scran)  # R==4.1.3
# Bioconductor version 3.14 (BiocManager 1.30.16), R 4.1.3
# remotes::install_version("matrixStats", version="1.1.0")
library(scater)
library(BiocSingular)
library(BACT)
## Set the working directory to the source file location
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)
print(getwd())
## Read raw data
coord = read.csv("../input_data/BeadLocationsForR.csv")
geneData_raw = read.csv("../input_data/MappedDGEForR.csv")
gene_names = geneData_raw[, 1]
geneData_raw_noName = as.matrix(geneData_raw[, -1])
rownames(geneData_raw_noName) = gene_names
# Dim: genes * cells =  18906 * 24847
cell_name = coord[, 1]
coord = coord[, -1]
colnames(coord) = c("coord_x", "coord_y")
### Randomly select 8000 cells for downstream analysis
set.seed(15)
ids_subset = sample(1:nrow(coord), 8000, replace = F)
coord_subset = coord[ids_subset, ]
data_subset = geneData_raw_noName[, ids_subset]
## Set the working directory to the source file location
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)
print(getwd())
## Read data
data_subset222 = read.csv("../input_data/gene_raw_counts_2.csv")
cell_names = data_subset222[, 1]
data_subset222 = data_subset222[, -1]
rownames(data_subset222) = cell_names
class(data_subset)
class(data_subset222)
AA = as.matrix(data_subset222)
class(AA)
View(AA)
View(data_subset)
### edgeR DE analysis ###
library(edgeR)
## Set the working directory to the source file location
current_dir <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(current_dir)
print(getwd())
## Read data
data_subset = read.csv("../input_data/gene_raw_counts_2.csv")
cell_names = data_subset[, 1]
data_subset = data_subset[, -1]
rownames(data_subset) = cell_names
data_subset = as.matrix(data_subset)  # convert data.frame to matrix
tmpres = read.csv("../result_data/slideseq_result_BACT.csv")
clIds_res = tmpres$labels
group <- rep("control", 8000)
group[clIds_res == 4] = "treat"
### --- data preprocessing --- ###
# Build DGEList object
dgelist <- DGEList(counts = data_subset, group = group)
# dim: 18906 * 8000
# Approach to filter low count data, such as CPM normalization (recommended)
keep <- rowSums(cpm(dgelist) > 1 ) >= 2
dgelist <- dgelist[keep, , keep.lib.sizes = FALSE]
# dim: 13960 * 8000
# Standardization, for example, TMM standardization
dgelist_norm <- calcNormFactors(dgelist, method = 'TMM')
# dim: 13960 * 8000
### --- DE gene analysis --- ###
# Construct the experimental design matrix based on the grouping information.
# Notice that the control group comes before the treatment group in the grouping information.
design <- model.matrix(~group)
# Estimate the dispersion of gene expression values
dge <- estimateDisp(dgelist_norm, design, robust = TRUE)
# Model fitting:
# negative binomial generalized log-linear model
fit <- glmFit(dge, design, robust = TRUE)
lrt <- topTags(glmLRT(fit), n = nrow(dgelist$counts))
### --- select DE genes --- ###
#读取上述输出的差异倍数计算结果
# gene_diff <- read.delim('/Users/yyq/Documents/MyDocument/project/image (Bioinformatics)/code/校服务器共享集群/sc_resol_st/Puck_180430_1/run-code/control_treat.glmLRT.txt', row.names = 1, sep = '\t', check.names = FALSE)
gene_diff <- lrt$table
# Sort the table by FDR value in ascending order.
# If the FDR value is the same, continue to sort by log2FC in descending order.
gene_diff <- gene_diff[order(gene_diff$FDR, gene_diff$logFC, decreasing = c(FALSE, TRUE)), ]
# log2FC≥1 & FDR<0.01 mark "up", denote the up-regulated genes
# log2FC≤-1 & FDR<0.01 mark "down", denote the down-regulated genes
# else mark "none", denote the non-DE genes
gene_diff[which(gene_diff$logFC >= 1 & gene_diff$FDR < 0.01),'sig'] <- 'up'
gene_diff[which(gene_diff$logFC <= -1 & gene_diff$FDR < 0.01),'sig'] <- 'down'
gene_diff[which(abs(gene_diff$logFC) <= 1 | gene_diff$FDR >= 0.01),'sig'] <- 'none'
View(gene_diff)
# Output the table of DE genes
gene_diff[which(gene_diff$FDR < 0.01),'onlyFDR'] <- 'Sig'
gene_diff[which(gene_diff$FDR >= 0.01),'onlyFDR'] <- 'none'
gene_diff_select_FDR <- subset(gene_diff, onlyFDR %in% 'Sig')
View(gene_diff_select_FDR)
write.table(gene_diff_select_FDR, file = '../result_data/control_treat.glmLRT.select_FDR.txt', sep = '\t', col.names = NA, quote = FALSE)
rownames(gene_diff_select_FDR)
paste(rownames(gene_diff_select_FDR), collapse = " ")
View(gene_diff_select_FDR)
View(gene_diff_select_FDR)
